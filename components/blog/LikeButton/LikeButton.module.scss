@import "~styles/modules/mixins.scss";
@import "~styles/modules/placeholders.scss";

.likeButton {
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--pink);
  border-radius: 0.4rem;

  &.likeButtonIsFixed {
    --heart-size: 3.2rem;
    position: fixed;
    z-index: 50;
    background-image: var(--like-button-bg);
    padding: 0 0.8rem 0 0;
    backdrop-filter: blur(2px);

    @include breakpoint(0, 1199.98) {
      top: 16px;
      right: 16px;
    }

    @include breakpoint(desktop) {
      top: 50vh;
      right: 0;
      transform: translateX(calc((var(--content-padding-inline) * -0.5) + 50%))
        translateY(-50%);
    }

    .likeButtonFocusMarker {
      inset: 0;
      box-shadow: 0 0 0 2px var(--pink-bg);
      border-radius: inherit;
      transform: scale(0);
      opacity: 0;
    }

    .likeButtonInput {
      @include onFocus {
        & ~ .likeButtonFocusMarker {
          transform: scale(1);
          opacity: 1;
        }
      }
    }
  }

  &:not(.likeButtonIsFixed) {
    --heart-size: 2.4rem;
    position: relative;
    padding: 0.2rem;

    .likeButtonFocusMarker {
      width: calc(var(--heart-size) * 2);
      height: calc(var(--heart-size) * 2);
      background-image: var(--like-button-bg);
      border-radius: 50%;
      transform: translateX(calc(var(--heart-size) * 0.1)) scale(0);
    }

    .likeButtonInput {
      @include onHoverAndFocus {
        & ~ .likeButtonFocusMarker {
          transform: translateX(calc(var(--heart-size) * 0.1)) scale(1);
        }
      }
    }
  }

  svg {
    width: var(--heart-size);
    height: var(--heart-size);
    min-width: var(--heart-size);
    pointer-events: none;
    overflow: visible;
    transition: 0.25s transform;

    path[data-layer="mainHeart"] {
      transform-origin: center;
      animation: animateHeartOut 0.3s linear forwards;
    }

    path[data-layer="circle"] {
      transform-origin: 20px 20px;
    }

    @keyframes animateHeartOut {
      0% {
        transform: scale(1.4);
      }

      100% {
        transform: scale(1);
      }
    }
  }
}

p.likeButtonLabel {
  margin: 0;
  font-size: 1.4rem !important;
  position: relative;
  z-index: 1;
  font-weight: var(--font-weight-medium);
}

.likeButtonInput {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;

  @include onHoverAndFocus {
    & ~ svg {
      transform: scale(1.2);
    }
  }

  &:checked ~ svg {
    path[data-layer="mainHeart"] {
      transform: scale(0.2);
      animation: animateHeart 0.3s linear forwards 0.25s;

      @keyframes animateHeart {
        0% {
          transform: scale(0.2);
        }

        40% {
          transform: scale(1.2);
        }

        100% {
          transform: scale(1);
        }
      }
    }

    path[data-layer="heart"] {
      transform-origin: center;

      &[data-order="1"] {
        transition: 0.5s transform 0.3s;
      }

      &[data-order="2"] {
        transition: 1.5s transform 0.3s;
      }
    }

    path[data-layer="circle"] {
      transition: all 2s;
      animation: animateCircle 0.3s linear forwards;
      opacity: 1;

      @keyframes animateCircle {
        40% {
          transform: scale(10);
          opacity: 1;
          fill: #dd4688;
        }

        55% {
          transform: scale(11);
          opacity: 1;
          fill: #d46abf;
        }

        65% {
          transform: scale(12);
          opacity: 1;
          fill: #cc8ef5;
        }

        75% {
          transform: scale(13);
          opacity: 1;
          fill: transparent;
          stroke: #cc8ef5;
          stroke-width: 0.5;
        }

        85% {
          transform: scale(17);
          opacity: 1;
          fill: transparent;
          stroke: #cc8ef5;
          stroke-width: 0.2;
        }

        95% {
          transform: scale(18);
          opacity: 1;
          fill: transparent;
          stroke: #cc8ef5;
          stroke-width: 0.1;
        }

        100% {
          transform: scale(19);
          opacity: 1;
          fill: transparent;
          stroke: #cc8ef5;
          stroke-width: 0;
        }
      }
    }

    g[data-layer="hearts"][data-order="1"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(0, -5px);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(5px, -20px);
      }
    }

    g[data-layer="hearts"][data-order="2"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(10px, 0);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(20px, 10px);
      }
    }

    g[data-layer="hearts"][data-order="3"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(-10px, -5px);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(-20px, 10px);
      }
    }

    g[data-layer="hearts"][data-order="4"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(5px, -5px);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(20px, -20px);
      }
    }

    g[data-layer="hearts"][data-order="5"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(10px, -0);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(20px, 10px);
      }
    }

    g[data-layer="hearts"][data-order="6"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(-10px, -10px);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(-20px, -20px);
      }
    }

    g[data-layer="hearts"][data-order="7"] {
      path[data-layer="heart"][data-order="1"] {
        transform: scale(0) translate(-5px, -10px);
      }

      path[data-layer="heart"][data-order="2"] {
        transform: scale(0) translate(-15px, -25px);
      }
    }

    g[data-layer="hearts"] {
      opacity: 1;
      transition: 0.1s opacity 0.3s;
    }
  }
}

.likeButtonFocusMarker {
  pointer-events: none;
  position: absolute;
  transition: all 100ms ease-in-out;
  z-index: 0;
}
